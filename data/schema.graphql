type Activity implements Node {
  _id: ID!

  # The ID of an object
  id: ID!
  discipline: Discipline
  disciplineId: ID
  disciplineName: String
  distance: Float
  unit: String
  score: Float
  date: DateTime
  week: Int
  year: Int
  user: User
  userId: ID
  userName: String
}

# A connection to a list of items.
type ActivityConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ActivityEdge]
}

# An edge in a connection.
type ActivityEdge {
  # The item at the end of the edge
  node: Activity

  # A cursor for use in pagination
  cursor: String!
}

input AddActivityInput {
  userId: String!
  disciplineId: String!
  distance: Float!
  date: String!
  clientMutationId: String
}

type AddActivityPayload {
  activity: Activity
  activityEdge: ActivityEdge
  user: User
  medals: [Medals]
  store: Store
  clientMutationId: String
}

input AddSeasonInput {
  name: String!
  url: String!
  from: Int!
  to: Int!
  clientMutationId: String
}

type AddSeasonPayload {
  season: Season
  clientMutationId: String
}

input AddUserInput {
  name: String!
  username: String!
  clientMutationId: String
}

type AddUserPayload {
  user: User
  store: Store
  clientMutationId: String
}

scalar DateTime

type Discipline implements Node {
  _id: ID!

  # The ID of an object
  id: ID!
  name: String
  score: Float
  unit: String
}

input EditActivityInput {
  id: String!
  userId: String!
  disciplineId: String!
  distance: Float!
  date: String!
  clientMutationId: String
}

type EditActivityPayload {
  activity: Activity
  user: User
  medals: [Medals]
  store: Store
  clientMutationId: String
}

input EnsureLoginInput {
  username: String!
  provider: String!
  providerUserId: String!
  clientMutationId: String
}

type EnsureLoginPayload {
  user: User
  clientMutationId: String
}

type Medals implements Node {
  _id: ID!

  # The ID of an object
  id: ID!
  gold: Int
  goldWeeks: [Int]
  silver: Int
  silverWeeks: [Int]
  bronze: Int
  bronzeWeeks: [Int]
}

type Mutation {
  addActivity(input: AddActivityInput!): AddActivityPayload
  editActivity(input: EditActivityInput!): EditActivityPayload
  removeActivity(input: RemoveActivityInput!): RemoveActivityPayload
  addUser(input: AddUserInput!): AddUserPayload
  addSeason(input: AddSeasonInput!): AddSeasonPayload
  ensureLogin(input: EnsureLoginInput!): EnsureLoginPayload
  setPersonalGoals(input: SetPersonalGoalsInput!): SetPersonalGoalsPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type PersonalGoal implements Node {
  _id: ID!

  # The ID of an object
  id: ID!
  user: User
  userId: ID
  userName: String
  discipline: Discipline
  disciplineId: ID
  disciplineName: String
  count: Int
  dist: Float
  score: Int
  priority: Int
}

input PersonalGoalInput {
  disciplineId: String
  count: Int
  dist: Float
  score: Int
}

type Query {
  store: Store
  season(id: String): Season
  user(id: String, username: String): User

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

input RemoveActivityInput {
  id: String!
  clientMutationId: String
}

type RemoveActivityPayload {
  removedActivityId: String
  user: User
  medals: [Medals]
  store: Store
  clientMutationId: String
}

type Season implements Node {
  _id: ID!

  # The ID of an object
  id: ID!
  name: String
  url: String
  from: Int
  to: Int
}

input SetPersonalGoalsInput {
  userId: ID!
  goals: [PersonalGoalInput]
  clientMutationId: String
}

type SetPersonalGoalsPayload {
  user: User
  clientMutationId: String
}

type Store implements Node {
  # The ID of an object
  id: ID!
  echo: String
  disciplines: [Discipline]
  users: [User]
  currentSeason: Season
  allSeasons: [Season]
  allSummaries: [Summary]
  summary(week: Int, year: Int): [Summary]
}

type Summary implements Node {
  _id: ID!

  # The ID of an object
  id: ID!
  user: User
  userId: ID
  userName: String
  score: Float
  week: Int
  year: Int
}

type User implements Node {
  _id: ID!

  # The ID of an object
  id: ID!
  name: String
  username: String
  active: Boolean
  activities(after: String, first: Int, before: String, last: Int): ActivityConnection
  summary(week: Int, year: Int): Summary
  medals: Medals
  personalGoals: [PersonalGoal]
}
