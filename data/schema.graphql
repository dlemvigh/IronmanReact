type Activity implements Node {
  _id: ID!

  # The ID of an object
  id: ID!
  disciplineId: ID
  disciplineName: String
  distance: Float
  unit: String
  score: Float
  date: DateTime
  userId: ID
  userName: String
}

# A connection to a list of items.
type ActivityConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ActivityEdge]
}

# An edge in a connection.
type ActivityEdge {
  # The item at the end of the edge
  node: Activity

  # A cursor for use in pagination
  cursor: String!
}

input AddActivityInput {
  userId: String!
  disciplineId: String!
  distance: Float!
  date: String!
  clientMutationId: String
}

type AddActivityPayload {
  activityEdge: ActivityEdge
  user: User
  clientMutationId: String
}

scalar DateTime

type Discipline implements Node {
  _id: ID!

  # The ID of an object
  id: ID!
  name: String
  score: Float
  unit: String
}

# A connection to a list of items.
type DisciplineConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [DisciplineEdge]
}

# An edge in a connection.
type DisciplineEdge {
  # The item at the end of the edge
  node: Discipline

  # A cursor for use in pagination
  cursor: String!
}

type Mutation {
  addActivity(input: AddActivityInput!): AddActivityPayload
  removeActivity(input: RemoveActivityInput!): RemoveActivityPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  store: Store
  user(id: String!): User

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

input RemoveActivityInput {
  id: String!
  clientMutationId: String
}

type RemoveActivityPayload {
  removedActivityId: String
  user: User
  clientMutationId: String
}

type Store implements Node {
  # The ID of an object
  id: ID!
  echo: String
  disciplines(after: String, first: Int, before: String, last: Int): DisciplineConnection
  users(after: String, first: Int, before: String, last: Int): UserConnection
}

type User implements Node {
  _id: ID!

  # The ID of an object
  id: ID!
  name: String
  facebookId: String
  active: Boolean
  activities(after: String, first: Int, before: String, last: Int): ActivityConnection
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User

  # A cursor for use in pagination
  cursor: String!
}
